<?PHP
/*********************************************************************************
 * SugarCRM Community Edition is a customer relationship management program developed by
 * SugarCRM, Inc. Copyright (C) 2004-2012 SugarCRM Inc.
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by the
 * Free Software Foundation with the addition of the following permission added
 * to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED WORK
 * IN WHICH THE COPYRIGHT IS OWNED BY SUGARCRM, SUGARCRM DISCLAIMS THE WARRANTY
 * OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Affero General Public License along with
 * this program; if not, see http://www.gnu.org/licenses or write to the Free
 * Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301 USA.
 * 
 * You can contact SugarCRM, Inc. headquarters at 10050 North Wolfe Road,
 * SW2-130, Cupertino, CA 95014, USA. or at email address contact@sugarcrm.com.
 * 
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 * 
 * In accordance with Section 7(b) of the GNU Affero General Public License version 3,
 * these Appropriate Legal Notices must retain the display of the "Powered by
 * SugarCRM" logo. If the display of the logo is not reasonably feasible for
 * technical reasons, the Appropriate Legal Notices must display the words
 * "Powered by SugarCRM".
 ********************************************************************************/

/**
 * THIS CLASS IS GENERATED BY MODULE BUILDER
 * PLEASE DO NOT CHANGE THIS CLASS
 * PLACE ANY CUSTOMIZATIONS IN rolus_SMS_log
 */

require_once('custom/include/twilio/Exceptions.php');

class rolus_SMS_log_sugar extends Basic {
	var $new_schema = true;
	var $module_dir = 'rolus_SMS_log';
	var $object_name = 'rolus_SMS_log';
	var $table_name = 'rolus_sms_log';
	var $importable = false;
	var $disable_row_level_security = true ; // to ensure that modules created and deployed under CE will continue to function under team security if the instance is upgraded to PRO
		var $id;
		var $name;
		var $date_entered;
		var $date_modified;
		var $modified_user_id;
		var $modified_by_name;
		var $created_by;
		var $created_by_name;
		var $description;
		var $deleted;
		var $created_by_link;
		var $modified_user_link;
		var $assigned_user_id;
		var $assigned_user_name;
		var $assigned_user_link;
		var $reference_id;
		var $subject;
		var $message;
		var $date_sent;
		var $number_of_messages;
		var $status;
		var $direction;
		var $cost;
		var $destinaiton;
		var $origin;
		var $url;
		var $account;
		var $minutes_values = array('0'=>'00',
                                    '1'=>'01',
                                    '2'=>'02',
                                    '3'=>'03',
                                    '4'=>'04',
                                    '5'=>'05',
                                    '6'=>'06',
                                    '7'=>'07',
                                    '8'=>'08',
                                    '9'=>'09',
                                    '10'=>'10',
                                    '11'=>'11',
                                    '12'=>'12',
                                    '13'=>'13',
                                    '14'=>'14',
                                    '15'=>'15',
                                    '16'=>'16',
                                    '17'=>'17',
                                    '18'=>'18',
                                    '19'=>'19',
                                    '20'=>'20',
                                    '21'=>'21',
                                    '22'=>'22',
                                    '23'=>'23',
                                    '24'=>'24',
                                    '25'=>'25',
                                    '26'=>'26',
                                    '27'=>'27',
                                    '28'=>'28',
                                    '29'=>'29',
                                    '30'=>'30',
                                    '31'=>'31',
                                    '32'=>'32',
                                    '32'=>'33',
                                    '34'=>'34',
                                    '35'=>'35',
                                    '36'=>'36',
                                    '37'=>'37',
                                    '38'=>'38',
                                    '39'=>'39',
                                    '40'=>'40',
                                    '41'=>'41',
                                    '42'=>'42',
                                    '43'=>'43',
                                    '44'=>'44',
                                    '45'=>'45',
                                    '46'=>'46',
                                    '47'=>'47',
                                    '48'=>'48',
                                    '49'=>'49',
                                    '50'=>'50',
                                    '51'=>'51',
                                    '52'=>'52',
                                    '53'=>'53',
                                    '54'=>'54',
                                    '55'=>'55',
                                    '56'=>'56',
                                    '57'=>'57',
                                    '58'=>'58',
                                    '59'=>'59');
		function rolus_SMS_log_sugar(){	
		parent::Basic();
	}
	
	function bean_implements($interface){
		switch($interface){
			case 'ACL': return true;
		}
		return false;
	}
	
	function save($check_notify = FALSE)
	{
		// before the save is attempted check if the record needs to be updated or inserted into the system
		// *** need to update to take new_with_id check

		if (!empty($this->id))
			$update = true;
		
		if (!isset($this->assigned_user_id) || empty($this->assigned_user_id ))
			if (isset($GLOBALS['current_user']))
				$this->assigned_user_id = $GLOBALS['current_user']->id;
			else
				$this->assigned_user_id = '1';
			
		// if the record was being created then check if the SMS needs to be sent
		if (!$update)
		{
			// Check if the SMS needs to be sent
			if($this->needToSendSMS())
				$this->sendSMS();
		}
		
		//dont save empty bean in database if message is not sent, due to some exception
		if(!empty($_REQUEST['source_number']) AND !empty($_REQUEST['destination_number']))
		{
		if(!isset($this->reference_id) || empty($this->reference_id))
		{
			$GLOBALS['log']->fatal($_REQUEST['source_number']);
		$GLOBALS['log']->fatal($_REQUEST['destination_number']);
		$GLOBALS['log']->fatal("save function");
		$update = false;
		 $GLOBALS['log']->fatal("reference id is empty");
		 print("failed");
			exit;	
		}
		}

		// Call the SugarBean's save function
		$ret = parent::save($check_notify);

		if(!empty($_REQUEST['source_number']) AND !empty($_REQUEST['destination_number']))	
		{
			print("sent");
			exit;	
		}	
		// return the value returned by Sugar Bean's save function
		return $ret;
	}
	
	/*
	 * This funciton checks if an SMS needs to be sent or not
	 *
	**/
	function needToSendSMS()
	{
		if (isset($this->from_sync) && $this->from_sync == "TwilioSync")
			return false;
		if ($this->direction == 'outgoing' && in_array($this->status,array('','sending')))
			return true;
		//return false;
	}
	
	function sendSMS()
	{

		global $sugar_config;
		try
		{
			// Get the Twilio Account settings
			$client = $this->getClient();
			$characters_per_sms = 1600; //160
			// for placing the original message in database to show in chat window if message is greater than 1600 characters
			$original_message = '';
			$huge_sms = false; // this will represent that the current sms is having characters more than 1600 in it 
			$count_sms = 0; // this will contain the count of separate sms when there is huge sms to send for calculating n displaying actual huge sms price 
	
			if(!(is_object($client) && $client instanceof Services_Twilio))
				throw new settingsException('Cannot connect to Twilio','3');

			//this case will deal with the Quick Create SMS		
			if(!empty($_REQUEST['source_number']) AND !empty($_REQUEST['destination_number']))
			{
				$source = $_REQUEST['source_number'];	
				$destination = $_REQUEST['destination_number'];
				$message = base64_decode($_REQUEST['sms_text']);
				$message = htmlspecialchars_decode($message);
				
				$original_message = $message; 
			}
			else //this case will deal with the outgoing EditView SMS	
			{
				require_once('modules/rolus_Twilio_Account/rolus_Twilio_Account.php');
				$rolus_Twilio_Account = new rolus_Twilio_Account();
				
				$rolus_Twilio_Account->retrieve('1');
								
				$source =  $rolus_Twilio_Account->phone_number;
				$destination = $this->destinaiton;
				//if($this->status=='scheduled')
				//{
				//$message = $this->message;
				//}
				//else
				//{
				$message = base64_decode($this->message);
				//}
				//$message = base64_decode($this->message);
				$original_message = $message;
			}
			
			if (empty($source) || empty($destination) || empty($message))
				throw new settingsException('Data missing','3');
			
			$site_url = $sugar_config['site_url'];
			$site_url = parse_url($site_url);
					
			if ($site_url['host'] == 'localhost' || $site_url['host'] == '127.0.0.1')
			{
				if(strlen($message)>$characters_per_sms)
				{	
					$huge_sms = true;
					
					$messages = str_split($message , $characters_per_sms); // splitting sms to more than one $characters_per_sms chars per sms
					$count_sms = count($messages);
					
					foreach($messages as $message)
					{
						$sms = $client->account->sms_messages->create($source,$destination,$message);
						$this->need_sync = '0';
					}				
				}
				else
				{					
					//$sms = $client->account->sms_messages->create($source,$destination,$message);
					$sms = $client->account->messages->create(array(
					'To'=>$destination,
					'From'=>$source,
					'Body'=>$message,
					));
					$GLOBALS['log']->debug("current sent sms detail=>");
					$GLOBALS['log']->debug(print_r($sms,1));
					
					$this->need_sync = '1';
				}	
			}
			else
			{
				if(strlen($message)>$characters_per_sms)
				{
					$huge_sms = true;
					 
					$messages = str_split($message , $characters_per_sms); // splitting sms to more than one 160 chars per sms
					$count_sms = count($messages);
					
					foreach($messages as $message)
					{
						$callback = $sugar_config['site_url'].'/index.php?entryPoint=twilioSMS';
						$sms = $client->account->sms_messages->create($source,$destination,$message,array('StatusCallback' => $callback));
					}				
				}
				else
				{
					$callback = $sugar_config['site_url'].'/index.php?entryPoint=twilioSMS';

					$sms = $client->account->messages->create(array(
					'To'=>$destination,
					'From'=>$source,
					'Body'=>$message,
					'StatusCallback' => $callback,
					));
					//$sms = $client->account->sms_messages->create($source,$destination,$message,array('StatusCallback' => $callback));
					
					$GLOBALS['log']->debug("current sent sms detail=>");
					$GLOBALS['log']->debug(print_r($sms,1));
					
				}								
			}
			
			$this->reference_id = $sms->sid; 
			$this->account = $sms->account_sid;
			$this->destinaiton = $sms->to;
			$this->origin = $sms->from;
			$this->message = ($huge_sms ==  true)? $original_message : $sms->body; // if not single sms then save the original sms in db
			
			$status = '';
			if ($sms->status == 'queued')
				$status = 'sending';
			$this->status = $status;
			$direction = '';
			if (preg_match('/outgoing|outbound/i',$sms->direction))
				$direction = 'outgoing';
			$this->direction = $direction;
			
			$this->cost = ($huge_sms ==  true)? ($sms->price*$count_sms) : $sms->price; //if not single sms then save the total price in db			
			
			$this->url = $sms->uri; 
			if(isset($_REQUEST['debug']) AND $_REQUEST['debug'] == "true")			
			{
				$GLOBALS['log']->debug("current sent sms detail=>");
				$GLOBALS['log']->debug(print_r($sms,1));
			}
		} catch (communicaitonException $e) {			
			$GLOBALS['log']->fatal("Caught communicaitonException ('{$e->getMessage()}')\n{$e}\n");
		} catch (settingsException $e) {			
			$GLOBALS['log']->fatal("Caught settingsException ('{$e->getMessage()}')\n{$e}\n");
		} catch (Exception $e) {			
			$GLOBALS['log']->fatal("Caught Exception ('{$e->getMessage()}')\n{$e}\n");
		}

	}
	
	function updateStatus($reference_id = '',$status ='')
	{
		if (!empty($reference_id))
		{
			$status_map = array(
				'' => '',
				'delivered'=>'sent',
				'sent' => 'sent',
				'failed' => 'failed',
				'queued' => 'sending',
				'undelivered' => 'failed',
			);
			$cost = '';
			if ($status == 'sent')
			{
				$client = $this->getClient();
				if(is_object($client) && $client instanceof Services_Twilio)
				{
					$message = $client->account->sms_messages->get($reference_id);
					// $message = $client->get_sms($reference_id);
					
					$dt = new DateTime($message->date_sent);
					$dt = (array)$dt;
					$date_sent = $dt['date'];
					$cost = (string)$message->price;					
					
					$GLOBALS['log']->debug("fetching current sms detail from twilio=>");
					$GLOBALS['log']->debug(print_r($message,1));
				}	
			}
			else if (empty($status))
			{
				$client = $this->getClient();
				if(is_object($client) && $client instanceof Services_Twilio)
				{
					$message = $client->account->sms_messages->get($reference_id);
					// $message = $client->get_sms($reference_id);
					
					$dt = new DateTime($message->date_sent);
					$dt = (array)$dt;
					$date_sent = $dt['date'];
					$cost = (string)$message->price;
					$status = (string)$message->status;					
					
						$GLOBALS['log']->debug("fetching current sms detail from twilio(if not sent)=>");
						$GLOBALS['log']->debug(print_r($message,1));
					
				}
			}
			$query = "UPDATE ".$this->table_name." SET `date_sent`='".$date_sent."',`status`='".$status_map[$status]."',`cost`='".$cost."' WHERE `reference_id`='".$reference_id."'";
			$this->db->query($query);
		}
	}
	
	function getClient()
	{
		require_once('modules/rolus_Twilio_Account/rolus_Twilio_Account.php');
		$rolus_Twilio_Account = new rolus_Twilio_Account();
		return $rolus_Twilio_Account->getClient();
	}		
	
	/**
	*	this function will register browser with twilio through services_twilio_capability and
	*	will return the $capability object, due to which twilio-registered browser will be capable enough 
	*	=> to listen incoming connections and
	*	=> to make outbound call through browser to traditional phone
	**/
	function getCapability()
	{
		require_once('modules/rolus_Twilio_Account/rolus_Twilio_Account.php');
		$rolus_Twilio_Account = new rolus_Twilio_Account();
		return $rolus_Twilio_Account->getCapability();
	}
	
	/**
	*	this will return the ApplicationSid of the Twilio TwiML application 
	*	to make twilio-registered browser capable enough to allow outgoing connections
	**/
	function getApplicationSid()
	{
		require_once('modules/rolus_Twilio_Account/rolus_Twilio_Account.php');
		$rolus_Twilio_Account = new rolus_Twilio_Account();
		return $rolus_Twilio_Account->getApplicationSid();
	}
}
?>
